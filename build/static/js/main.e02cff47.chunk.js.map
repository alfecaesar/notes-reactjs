{"version":3,"sources":["Components/NoteComponents/CreateNote.js","Components/NoteComponents/Note.js","Components/NoteComponents/Notes.js","App.js","index.js"],"names":["CreateNote","_ref","textHandler","saveHandler","inputText","charLeft","length","_jsxs","className","style","background","children","_jsx","cols","rows","value","placeholder","onChange","maxLength","onClick","LinearProgress","variant","Note","id","text","deleteNote","justifyContent","DeleteForeverOutlinedIcon","Notes","notes","setNotes","useState","setInputText","filteredNotes","filter","note","useEffect","data","JSON","parse","localStorage","getItem","setItem","stringify","map","e","target","prevState","uuid","App","container","document","getElementById","createRoot","render"],"mappings":"8QA8BeA,MA7Bf,SAAmBC,GAA2C,IAA1C,YAAEC,EAAW,YAAEC,EAAW,UAAEC,GAAWH,EAEzD,MACMI,EADY,IACWD,EAAUE,OACvC,OACEC,eAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,WAAY,0BAA2BC,SAAA,CACpEC,cAAA,YACEC,KAAK,KACLC,KAAK,IACLC,MAAOX,EACPY,YAAY,WACZC,SAAUf,EACVgB,UAAU,QAEZX,eAAA,OAAKC,UAAU,eAAcG,SAAA,CAC3BJ,eAAA,QAAMC,UAAU,QAAOG,SAAA,CAAEN,EAAS,WAClCO,cAAA,UAAQJ,UAAU,aAAaW,QAAShB,EAAYQ,SAAC,YAIvDC,cAACQ,IAAc,CACbZ,UAAU,iBACVa,QAAQ,cACRN,MAAOV,MAIf,E,iBCXeiB,MAff,SAAarB,GAA4B,IAA3B,GAAEsB,EAAE,KAAEC,EAAI,WAAEC,GAAYxB,EACpC,OACEM,eAAA,OAAKC,UAAU,OAAMG,SAAA,CACnBC,cAAA,OAAKJ,UAAU,aAAYG,SAAEa,IAC7BZ,cAAA,OAAKJ,UAAU,eAAeC,MAAO,CAAEiB,eAAgB,YAAaf,SAClEC,cAACe,IAAyB,CACxBnB,UAAU,eACVW,QAASA,IAAMM,EAAWF,GAC1B,cAAY,aAKtB,E,QCqDeK,MA9Df,WAEE,MAAOC,EAAOC,GAAYC,mBAAS,KAC5B3B,EAAW4B,GAAgBD,mBAAS,IAqBrCN,EAAcF,IAClB,MAAMU,EAAgBJ,EAAMK,QAAQC,GAASA,EAAKZ,KAAOA,IACzDO,EAASG,EAAc,EAiBzB,OAZAG,qBAAU,KACR,MAAMC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UACzCJ,GACFP,EAASO,EACX,GACC,IAGHD,qBAAU,KACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUd,GAAO,GACnD,CAACA,IAGFtB,eAAA,OAAKC,UAAU,QAAOG,SAAA,CACnBkB,EAAMe,KAAKT,GACVvB,cAACU,EAAI,CAEHC,GAAIY,EAAKZ,GACTC,KAAMW,EAAKX,KACXC,WAAYA,GAHPU,EAAKZ,MAMdX,cAACZ,EAAU,CACTE,YAhDe2C,IACnBb,EAAaa,EAAEC,OAAO/B,MAAM,EAgDxBZ,YA5CcA,KAClB2B,GAAUiB,GAAc,IACnBA,EACH,CACExB,GAAIyB,cACJxB,KAAMpB,MAIV4B,EAAa,GAAG,EAoCZ5B,UAAWA,MAInB,ECxDe6C,MAPf,WACE,OACErC,cAAA,OAAKJ,UAAU,OAAMG,SACnBC,cAACgB,EAAK,KAGZ,ECNA,MAAMsB,EAAYC,SAASC,eAAe,sBAC7BC,qBAAWH,GACnBI,OAAO1C,cAACqC,EAAG,I","file":"static/js/main.e02cff47.chunk.js","sourcesContent":["import LinearProgress from \"@mui/material/LinearProgress\";\r\nfunction CreateNote({ textHandler, saveHandler, inputText }) {\r\n  //character limit\r\n  const charLimit = 500;\r\n  const charLeft = charLimit - inputText.length;\r\n  return (\r\n    <div className=\"note\" style={{ background: \"rgba(255, 255, 255, 0)\" }}>\r\n      <textarea\r\n        cols=\"10\"\r\n        rows=\"5\"\r\n        value={inputText}\r\n        placeholder=\"Type....\"\r\n        onChange={textHandler}\r\n        maxLength=\"500\"\r\n      ></textarea>\r\n      <div className=\"note__footer\">\r\n        <span className=\"label\">{charLeft} left</span>\r\n        <button className=\"note__save\" onClick={saveHandler}>\r\n          Save\r\n        </button>\r\n      </div>\r\n      <LinearProgress\r\n        className=\"char__progress\"\r\n        variant=\"determinate\"\r\n        value={charLeft}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateNote;\r\n","import DeleteForeverOutlinedIcon from \"@mui/icons-material/DeleteForeverOutlined\";\r\n\r\nfunction Note({ id, text, deleteNote }) {\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"note__body\">{text}</div>\r\n      <div className=\"note__footer\" style={{ justifyContent: \"flex-end\" }}>\r\n        <DeleteForeverOutlinedIcon\r\n          className=\"note__delete\"\r\n          onClick={() => deleteNote(id)}\r\n          aria-hidden=\"true\"\r\n        ></DeleteForeverOutlinedIcon>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"../css/Note.css\";\r\nimport CreateNote from \"./CreateNote\";\r\nimport Note from \"./Note\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nfunction Notes() {\r\n  //states\r\n  const [notes, setNotes] = useState([]);\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  // get text and store in state\r\n  const textHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  // add new note to the state array\r\n  const saveHandler = () => {\r\n    setNotes((prevState) => [\r\n      ...prevState,\r\n      {\r\n        id: uuid(),\r\n        text: inputText\r\n      }\r\n    ]);\r\n    //clear the textarea\r\n    setInputText(\"\");\r\n  };\r\n\r\n  //delete note function\r\n  const deleteNote = (id) => {\r\n    const filteredNotes = notes.filter((note) => note.id !== id);\r\n    setNotes(filteredNotes);\r\n  };\r\n\r\n  //apply the save and get functions using useEffect\r\n  //get the saved notes and add them to the array\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(\"Notes\"));\r\n    if (data) {\r\n      setNotes(data);\r\n    }\r\n  }, []);\r\n\r\n  //saving data to local storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"Notes\", JSON.stringify(notes));\r\n  }, [notes]);\r\n\r\n  return (\r\n    <div className=\"notes\">\r\n      {notes.map((note) => (\r\n        <Note\r\n          key={note.id}\r\n          id={note.id}\r\n          text={note.text}\r\n          deleteNote={deleteNote}\r\n        />\r\n      ))}\r\n      <CreateNote\r\n        textHandler={textHandler}\r\n        saveHandler={saveHandler}\r\n        inputText={inputText}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n","import \"./Components/css/App.css\";\r\nimport Notes from \"./Components/NoteComponents/Notes\";\r\nimport Header from \"./Components/NoteComponents/Header\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"main\">\r\n      <Notes />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import { createRoot } from 'react-dom/client';\r\nimport App from './App';\r\n\r\nconst container = document.getElementById('tco-note-container');\r\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\r\nroot.render(<App />);\r\n\r\n"],"sourceRoot":""}